{"remainingRequest":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\babel-loader\\lib\\index.js!C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\D\\Wind\\Blog\\web\\admin\\src\\views\\article\\Article.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\D\\Wind\\Blog\\web\\admin\\src\\views\\article\\Article.vue","mtime":1676894149086},{"path":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686291304238},{"path":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686291304210},{"path":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1686291315932},{"path":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686291304238},{"path":"C:\\D\\Wind\\Blog\\web\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1686291309679}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}